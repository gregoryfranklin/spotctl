V            := 0
Q            := $(if $(filter 1,$(V)),,@)
GO           := GO111MODULE=on go
GIT_DIRTY    := $(shell test -n "`git status --porcelain`" && echo ".CHANGES" || true)
VERSION      := $$(cat internal/version/VERSION)

##@ Development

.PHONY: build
build: fmt ## Build all commands
	$(Q) $(GO) build \
		-trimpath \
		-race \
		-o dist/spotctl cmd/spotctl/main.go

.PHONY: release
release: fmt ## Release all commands
ifneq ($(strip $(GIT_DIRTY)),)
	$(Q) echo "Git is currently in a dirty state. Please commit your changes or stash them before you release."; exit 1;
else
	$(Q) echo $(shell bash -c 'read -p "Bump version: $(VERSION) â†’ " version; echo $$version') > internal/version/VERSION
	$(Q) git commit -am "chore(release): v$(VERSION)"
	$(Q) git tag -f -m  "chore(release): v$(VERSION)" v$(VERSION)
	$(Q) git push --follow-tags
endif

.PHONY: test
test: fmt ## Run all tests
	$(Q) $(GO) test \
		-v $$($(GO) list ./... | grep -v vendor) $(TESTARGS) \
		-covermode=atomic \
		-coverprofile=dist/coverage.txt \
		-race \
		-timeout=30s \
		-parallel=4

.PHONY: cover
cover: test ## Run all tests and open the coverage report
	$(Q) $(GO) tool cover -html=dist/coverage.txt

.PHONY: tidy
tidy: ## Add missing and remove unused modules
	$(Q) $(GO) mod tidy

.PHONY: vendor
vendor: ## Make vendored copy of all dependencies
	$(Q) $(GO) mod vendor

.PHONY: fmt
fmt: ## Format all .go files
	$(Q) $(GO) fmt ./...

.PHONY: vet
vet: ## Analyze all .go files
	$(Q) $(GO) vet ./...

.PHONY: clean
clean: ## Clean the generated artifacts
	$(Q) rm -rf dist
